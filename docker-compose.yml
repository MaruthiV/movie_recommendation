version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: movie_recommendation_postgres
    environment:
      POSTGRES_DB: movie_recommendation
      POSTGRES_USER: movie_user
      POSTGRES_PASSWORD: movie_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movie_user -d movie_recommendation"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - movie_recommendation_network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: movie_recommendation_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@movie-recommendation.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - movie_recommendation_network

  # Redis for caching (will be used later)
  redis:
    image: redis:7-alpine
    container_name: movie_recommendation_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - movie_recommendation_network

  # Neo4j for knowledge graph
  neo4j:
    image: neo4j:5.15.0
    container_name: movie_recommendation_neo4j
    environment:
      NEO4J_AUTH: neo4j/test_password
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    restart: unless-stopped
    networks:
      - movie_recommendation_network

  # Milvus Vector Database
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - movie_recommendation_network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - movie_recommendation_network

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - movie_recommendation_network

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: movie_recommendation_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - movie_recommendation_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: movie_recommendation_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - movie_recommendation_network

  # Flink for stream processing
  flink-jobmanager:
    image: apache/flink:1.18.1
    container_name: movie_recommendation_flink_jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    networks:
      - movie_recommendation_network

  flink-taskmanager:
    image: apache/flink:1.18.1
    container_name: movie_recommendation_flink_taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - movie_recommendation_network

  # Feast Feature Store
  feast-online-store:
    image: redis:7-alpine
    container_name: movie_recommendation_feast_online_store
    ports:
      - "6379:6379"
    volumes:
      - feast_online_data:/data
    command: redis-server --appendonly yes
    networks:
      - movie_recommendation_network

  feast-offline-store:
    image: postgres:15-alpine
    container_name: movie_recommendation_feast_offline_store
    environment:
      POSTGRES_DB: feast
      POSTGRES_USER: feast_user
      POSTGRES_PASSWORD: feast_password
    ports:
      - "5433:5432"
    volumes:
      - feast_offline_data:/var/lib/postgresql/data
    networks:
      - movie_recommendation_network

  feast-registry:
    image: postgres:15-alpine
    container_name: movie_recommendation_feast_registry
    environment:
      POSTGRES_DB: feast_registry
      POSTGRES_USER: feast_user
      POSTGRES_PASSWORD: feast_password
    ports:
      - "5434:5432"
    volumes:
      - feast_registry_data:/var/lib/postgresql/data
    networks:
      - movie_recommendation_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local
  kafka_data:
    driver: local
  feast_online_data:
    driver: local
  feast_offline_data:
    driver: local
  feast_registry_data:
    driver: local

networks:
  movie_recommendation_network:
    driver: bridge 